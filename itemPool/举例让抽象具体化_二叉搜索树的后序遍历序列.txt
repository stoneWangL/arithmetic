时间限制：1秒 空间限制：32768K 热度指数：280711
 算法知识视频讲解
题目描述
输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。
假设输入的数组的任意两个数字都互不相同。

题设：
public class Solution {
    public boolean VerifySquenceOfBST(int [] sequence) {
        
    }
}



自己补充：
二叉搜索树（二叉查找树，二叉排序树）
左子树(所有节点值) < 根节点（值） < 右子树（值）

后序遍历 左 -》 右 -》 根
前序遍历 根 -》 左 -》 右
中序遍历 左 -》 根 -》 右

后序遍历的隐含条件 ：遍历结果，最后一个值为根节点，第一个值为最左下角的节点





我的答案：
public class Solution {
    public boolean VerifySquenceOfBST(int [] sequence) {
        if(sequence == null || sequence.length == 0)
            return false;
        return isBST(sequence, 0, sequence.length - 1);
        
    }
    
    public boolean isBST(int [] arr, int start, int end){
        //左边，右边向中间逼近，越过中间了还没返回false，表示可以返回true，即都符合搜索二叉树的特征
        if(start >= end)
            return true;
        int thisRoot = arr[end], i;
        //从左下角的节点（即后序遍历的第一个节点）开始找到那个最大的但小于根节点的节点，即左子树的所有节点
        for(i = start; i < end && arr[i] < arr[end]; i++)
            ;
        for(; i < end; i++){
            if(thisRoot > arr[i])
                return false;
        }
        return isBST(arr, start, i-1) && isBST(arr, i, end-1);
    }
}