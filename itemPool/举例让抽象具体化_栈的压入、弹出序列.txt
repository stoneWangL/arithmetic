时间限制：1秒 空间限制：32768K 热度指数：237115
本题知识点： 栈
 算法知识视频讲解
题目描述
输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。
假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，
序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。
（注意：这两个序列的长度是相等的）

题设：
import java.util.ArrayList;

public class Solution {
    public boolean IsPopOrder(int [] pushA,int [] popA) {
      
    }
}





我的答案：
import java.util.ArrayList;
import java.util.Stack;

public class Solution {
    public boolean IsPopOrder(int [] pushA,int [] popA) {
        if(pushA.length == 0 || popA.length == 0)
            return true;
        Stack<Integer> s = new Stack<Integer>();
        int num = 0;//记录popA的下标
        for(int i = 0; i < pushA.length; i++){
            s.push(pushA[i]);
            while(!s.empty() && s.peek() == popA[num]){
                s.pop();
                num++;
            }
        }
        return s.empty();
    }
}