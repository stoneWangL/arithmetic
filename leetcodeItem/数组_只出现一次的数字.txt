题目：
给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。

说明：

你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？

示例 1:

输入: [2,2,1]
输出: 1
示例 2:

输入: [4,1,2,1,2]
输出: 4

code：
使用HashMap极好,先遍历一般，目的是添加，数组元素为key,出现次数为value

class Solution {
    public int singleNumber(int[] nums) {
        //使用HashMap极好,先遍历一般，目的是添加，数组元素为key,出现次数为value
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for(int i = 0; i < nums.length; i++){
            if(map.containsKey(nums[i]))
                map.put(nums[i], map.get(nums[i])+1);
            else
                map.put(nums[i], 1);
        }
        
        //然后再遍历一遍，查看哪个key的value值为1
        for(Integer key : map.keySet()){
            if(map.get(key) == 1) return key;
        }
        
        return 0;
        
    }
}