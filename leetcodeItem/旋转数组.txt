题目：
给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。
示例 1:

输入: [1,2,3,4,5,6,7] 和 k = 3
输出: [5,6,7,1,2,3,4]
解释:
向右旋转 1 步: [7,1,2,3,4,5,6]
向右旋转 2 步: [6,7,1,2,3,4,5]
向右旋转 3 步: [5,6,7,1,2,3,4]
示例 2:

输入: [-1,-100,3,99] 和 k = 2
输出: [3,99,-1,-100]
解释: 
向右旋转 1 步: [99,-1,-100,3]
向右旋转 2 步: [3,99,-1,-100]
说明:

尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。
要求使用空间复杂度为 O(1) 的原地算法。











code：
解法一：
    /**
     * 双重循环
     * 时间复杂度：O(kn)
     * 空间复杂度：O(1)
     */
class Solution {
    public void rotate(int[] nums, int k) {
        // if(nums.length == 0) return;
        k %= nums.length;
        for(int j = 0; j < k; j++){
            int temp = nums[nums.length-1];
            for(int i = nums.length-1; i > 0; i--)
                nums[i] = nums[i-1];
            nums[0] = temp;
        }
    }
}

解法二：
翻转【及其巧妙】

     * 翻转
     * 时间复杂度：O(n)
     * 空间复杂度：O(1)

class Solution {
    
    public void rotate(int[] nums, int k) {
        int count = nums.length;
        k %= count; //将k对数组长度取余
        
        reverse(nums, 0, count-1); //将全部翻转
        reverse(nums, 0, k-1); //翻转需要移动的位数
        reverse(nums, k, count-1); //翻转不需要移动的位数
    }
    
    //翻转
    private static void reverse(int[] arr, int start, int end){
        //首位交换，分别中间逼近一位，迭代上一步
        while(start < end){
            int temp = arr[start];
            arr[start++] = arr[end];
            arr[end--] = temp;
        }
    }
}

证明过程
arr = [1,2,3,4,5] --右移两位--> [4,5,1,2,3] 
假设 n = arr.length，k = 右移位数，可得：  
     [1,2,3,4,5] --翻转索引为[0,n-1]之间的元素--> [5,4,3,2,1] 
                 --翻转索引为[0,k-1]之间的元素--> [4,5,3,2,1] 
                 --翻转索引为[k,n-1]之间的元素--> [4,5,1,2,3]
                 
旋转数组其实就是把数组分成了两部分，解题关键就是在保证原有顺序的情况下
把后面一部分移到前面去。数组整体翻转满足了第二个要素，但是打乱了数组的
原有顺序，所以此时再次对两部分进行翻转，让他们恢复到原有顺序（翻转之后
再翻转，就恢复成原有顺序了）。没有什么太复杂的思想，我也不清楚算法作者
的灵感来自哪。不过我看到这个算法的时候脑袋里想的是“汉诺塔”，也许有渊源
也说不定~








